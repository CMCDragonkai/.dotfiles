# Cygwin-only functions

: '
is-admin - Is the current session running with administrator privileges or not?

Usage: is-admin

Returns 0 or 1.
'
is-admin() {

    if net session > /dev/null 2>&1; then return 0
    else return 1; fi

}

: '
win-users - List all users, groups and built-in accounts. Does not include service accounts.

Usage: win-users
'
win-users() {
    powershell -Command 'Get-WmiObject -Class "win32_account" -Namespace "root\cimv2" | Sort-Object caption | Format-Table caption, __CLASS, FullName'
}

: '
win-service-users - List all service account users

Usage: win-service-users
'
win-service-users() {
    powershell -Command 'Get-Service | Foreach-Object {Write-Host NT Service\$($_.Name)}'
}

: '
plantuml - Run plantuml via Windows Java and Cygwin Graphviz Dot
'
plantuml() {

    local path_to_plantuml="$(cygpath --windows "$(which plantuml.jar)")"
    local path_to_dot="$(cygpath --windows "$(which dot)")"
    GRAPHVIZ_DOT="$path_to_dot" java -jar "$path_to_plantuml" $@

}

: '
netsniff - Create HAR from any HTTP Resource.
           This function relies on the Windows phantomjs.
           The netsniff inside ~/bin already works in Linux as an executable
           script.

Usage: netsniff <url>
'
netsniff () {

    phantomjs "$(cygpath --windows "$HOME/bin/netsniff")" "$1"

}

: '
notify-send - Compatibility wrapper around BurntToast powershell module.
              It basically allows you to send notifications to the Windows Action Centre.
              This tries to align with the notify-send on Linux.

Usage: notify-send [-q|--quiet] [-d|--dismiss] [-s|--sound <sound>] [-i|--icon <icon>] <title> <message>
'
notify-send () {

    local icon dismiss sound quiet title message

    snooze_and_dismiss=false
    quiet=false

    while [ "$#" -gt 0 ]; do
        case "$1" in
            -q|--quiet)
                quiet=true
            ;;
            -d|--dismiss)
                snooze_and_dismiss=true
            ;;
            -s|--sound)
                sound="$2"
            ;;
            -i|--icon)
                icon="$2"
            ;;
            *)
                # finished flags, jump to positional arguments
                break
            ;;
        esac
        shift # shift past the key or value (in this case, it's all keys)
    done

    title="$1"
    message="$2"

    command_to_execute='\powershell -Command "Import-Module BurntToast; New-BurntToastNotification'

    if [[ -n "$title" ]]; then
        command_to_execute+=" -Text '$title'"
        if [[ -n "$message" ]]; then
            command_to_execute+=", '$message'"
        fi
    fi

    if [[ -n "$icon" ]]; then
        command_to_execute+=" -AppLogo '$icon'"
    fi

    if [[ -n "$sound" ]]; then
        command_to_execute+=" -Sound '$sound'"
    fi

    if $quiet; then
        command_to_execute+=' -Silent'
    fi

    if $snooze_and_dismiss; then
        command_to_execute+=' -SnoozeAndDismiss'
    fi

    command_to_execute+='"'

    eval "$command_to_execute"

}

: '
loop-adapter-remove - Removes a device, here designed for the loop adapter ID.
                      Like ROOT\NET\0000.

Usage: loop-adapter-remove <loop-adapter-id>
'
loop-adapter-remove () {

    devcon64 remove "@${1}"

}
